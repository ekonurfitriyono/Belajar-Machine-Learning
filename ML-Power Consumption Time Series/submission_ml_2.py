# -*- coding: utf-8 -*-
"""submission-ML-2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rIVX2rLGtZAHnggbf4o0E2p2xpLmXS-j
"""

import numpy as np
import pandas as pd
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
import tensorflow as tf
import sklearn
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler

"""**Mengambil Dataset yang telah di upload:**"""

data_train = pd.read_csv('powerconsumption.csv')
data_train.head()

"""**Mengecek nilai kosong pada dataset:**"""

data_train.isnull().sum()

"""**Menghitung total isi dataset:**"""

len(data_train)

"""**Membagi data time series:**

"""

dates = data_train['Datetime'].values
power_consumption = data_train['PowerConsumption_Zone1'].values

"""**Visualisasi dataset time series:**"""

plt.figure(figsize=(15,5))
plt.plot(dates, power_consumption)
plt.title('Power Consumption', fontsize=20);

"""**Normalisasi dataset:**"""

scaler = MinMaxScaler()
scaled_power_consumption = scaler.fit_transform(np.array(power_consumption).reshape(-1, 1))

print(scaled_power_consumption)

"""**Menentukan 10% Threshold MAE dari dataset:**"""

threshold_mae = (scaled_power_consumption.max() - scaled_power_consumption.min()) * 10/100
threshold_mae

"""**Function untuk mengubah format dataset:**"""

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
  series = tf.expand_dims(series, axis=-1)
  ds = tf.data.Dataset.from_tensor_slices(series)
  ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
  ds = ds.flat_map(lambda w: w.batch(window_size + 1))
  ds = ds.shuffle(shuffle_buffer)
  ds = ds.map(lambda w: (w[:-1], w[-1:]))
  return ds.batch(batch_size).prefetch(1)

"""**Membagi data training dan validation:**"""

X_train, X_test, y_train, y_test = train_test_split(dates, scaled_power_consumption, test_size=0.2, shuffle=False)

"""**Mengubah format dataset agar dapat diterima function windowed_dataset:**"""

y_train = tf.squeeze(y_train, axis=-1)
y_test = tf.squeeze(y_test, axis=-1)

"""**Mengubah format dataset agar dapat diterima model:**"""

train_set = windowed_dataset(y_train, window_size=60, batch_size=100, shuffle_buffer=1000)
validation_set = windowed_dataset(y_test, window_size=60, batch_size=100, shuffle_buffer=1000)

"""**Membuat model:**"""

model = tf.keras.models.Sequential([
    tf.keras.layers.LSTM(60, return_sequences=True),
    tf.keras.layers.LSTM(60),
    tf.keras.layers.Dense(30, activation="relu"),
    tf.keras.layers.Dense(10, activation="relu"),
    tf.keras.layers.Dense(1),
])

"""**Melatih Model:**"""

optimizer = tf.keras.optimizers.SGD(learning_rate=1.0000e-04, momentum=0.9)
model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])


class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('val_mae')<threshold_mae):
      print('\nMae dibawah 10% tercapai')
      self.model.stop_training = True
callbacks = myCallback()


history = model.fit(train_set,
                    epochs=100,
                    validation_data=validation_set,
                    callbacks=callbacks
                    )

"""**Visualisasi Loss dan MAE:**"""

loss = history.history['loss']
mae = history.history['mae']
val_loss = history.history['val_loss']
val_mae = history.history['val_mae']

plt.figure(figsize=(6, 4))
plt.subplot(1, 1, 1)
plt.plot(loss, label='Training Loss')
plt.plot(val_loss, label='Validation Loss')
plt.title('Training and Validation Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()
plt.show()

plt.figure(figsize=(6, 4))
plt.subplot(1, 1, 1)
plt.plot(mae, label='Training MAE')
plt.plot(val_mae, label='Validation MAE')
plt.title('Training and Validation MAE')
plt.xlabel('Epoch')
plt.ylabel('MAE')
plt.legend()

plt.show()